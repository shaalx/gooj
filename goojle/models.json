[
	{
		"id": "0",
		"title": "reverse",
		"desc": "### reverse the array",
		"func_name": "reverse",
		"content": "package goojt\n\nfunc reverse(in []int) []int {\n\tleng := len(in)\n\tl := leng / 2\n\tfor i := 0; i \u003c l; i++ {\n\t\tin[i], in[leng-1-i] = in[leng-1-i], in[i]\n\t}\n\treturn in\n}",
		"args_type": "[]int",
		"rets_type": "[]int",
		"test_cases": "{in: []int{1, 2, 3}, out: []int{3, 2, 1}},\n\t\t{in: []int{1, 2, 4}, out: []int{4, 2, 1}},\n\t\t{in: []int{1, 5, 3}, out: []int{3, 5, 1}},\n\t\t{in: []int{6, 2, 3}, out: []int{3, 2, 6}},"
	},
	{
		"id": "1",
		"title": "sort",
		"desc": "### sort the array",
		"func_name": "sort",
		"content": "package goojt\n\nfunc sort(in []int) []int {\n\t return in\n}",
		"args_type": "[]int",
		"rets_type": "[]int",
		"test_cases": "{in: []int{1, 2, 3}, out: []int{1, 2, 3}},\n\t\t{in: []int{2, 1, 3}, out: []int{1, 2, 3}},\n\t\t{in: []int{3, 2, 1}, out: []int{1, 2, 3}},\n\t\t{in: []int{3, 1, 2}, out: []int{1, 2, 3}},"
	},
	{
		"id": "2",
		"title": "中位数",
		"desc": "### find mid of the array",
		"func_name": "mid",
		"content": "package goojt\n\nfunc mid(in []int) int {\n\t return 1\n}",
		"args_type": "[]int",
		"rets_type": "int",
		"test_cases": "{in: []int{1, 2, 3}, out:2},"
	},
	{
		"id": "3",
		"title": "找老乡",
		"desc": "大学的同学来自全国各地，对于远离家乡步入陌生大学校园的大一新生来说，碰到老乡是多么激动的一件事，于是大家都热衷于问身边的同学是否与自己同乡，来自新疆的小尼尤其热衷。但是大家都不告诉小尼他们来自哪里，只是说与谁同乡，从所给的信息中，你能告诉小尼有多少人确定是她的同乡吗？输入每个测试实例首先包括2个整数，**N（1 <= N <= 1000），M(0 <= M <= N*(N-1)/2)**，代表现有N个人（用1~N编号）和M组关系；在接下来的M行里，每行包括2个整数，a，b，代表a跟b是同乡；当N = 0，M = 0输入结束；已知1表示小尼本人输出对于每个测试实例，输出一个整数，代表确定是小尼同乡的人数.\n\n* 样例输入:\n\n\n\n\t\t3 1\n\t\t2 3\n\t\t5 4\n\t\t1 2\n\t\t3 4\n\t\t2 5\n\t\t3 2\n\t\t0 0\n\n\n* 样例输出:\n\n\n\t\t0\n\t\t4",
		"func_name": "neb",
		"content": "package goojt\n\nfunc neb(in []int) int {\n\t return 1\n}",
		"args_type": "[]int",
		"rets_type": "int",
		"test_cases": "{in: []int{1, 2, 3}, out:2},"
	}
]